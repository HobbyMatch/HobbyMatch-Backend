openapi: "3.1.0"
info:
  title: "HobbyMatch_Backend API"
  description: "HobbyMatch_Backend API"
  version: "1.0.0"
servers:
  - url: "https://HobbyMatch_Backend"
paths:
  /api/users:
    get:
      summary: "GET api/users"
      operationId: "getAllUsers"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserDTO"
    post:
      summary: "POST api/users"
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/users/email/{email}:
    get:
      summary: "GET api/users/email/{email}"
      operationId: "getUserByEmail"
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
    put:
      summary: "PUT api/users/email/{email}"
      operationId: "updateUser"
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/users/username/{username}:
    get:
      summary: "GET api/users/username/{username}"
      operationId: "getUserByUsername"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
    put:
      summary: "PUT api/users/username/{username}"
      operationId: "updateUserByUsername"
      parameters:
        - name: "username"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/users/exists/{email}:
    get:
      summary: "GET api/users/exists/{email}"
      operationId: "userExists"
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/users/search:
    post:
      summary: "POST api/users/search"
      operationId: "searchUsers"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchUserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserDTO"
  /api/users/email/{email}/activate:
    put:
      summary: "PUT api/users/email/{email}/activate"
      operationId: "activateUser"
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /api/users/email/{email}/deactivate:
    put:
      summary: "PUT api/users/email/{email}/deactivate"
      operationId: "deactivateUser"
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
components:
  schemas:
    HobbyDTO:
      type: "object"
      properties:
        name:
          type: "string"
      required:
        - "name"
    UserDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        firstName:
          type: "string"
        lastName:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"
        hobbies:
          type: "array"
          items:
            $ref: "#/components/schemas/HobbyDTO"
        birthday:
          type: "string"
        bio:
          type: "string"
      required:
        - "id"
        - "firstName"
        - "lastName"
        - "username"
        - "email"
        - "hobbies"
        - "birthday"
    CreateUserDTO:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"
        birthday:
          type: "string"
        bio:
          type: "string"
        hobbies:
          type: "array"
          items:
            $ref: "#/components/schemas/HobbyDTO"
      required:
        - "firstName"
        - "lastName"
        - "username"
        - "email"
        - "birthday"
        - "hobbies"
    UpdateUserDTO:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        username:
          type: "string"
        hobbies:
          type: "array"
          items:
            $ref: "#/components/schemas/HobbyDTO"
        bio:
          type: "string"
        birthday:
          type: "string"
      required:
        - "firstName"
        - "lastName"
        - "username"
        - "hobbies"
    SearchUserDTO:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"